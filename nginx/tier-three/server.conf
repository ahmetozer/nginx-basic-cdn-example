upstream tierTwo {
	hash $request_uri consistent;
	keepalive 32; # Keepalive connections to upstream servers
	keepalive_requests 1000; # Number of requests to send on a keepalive connection, to free memory
	keepalive_time 1h;
	zone upstream_dynamic 640k;
	server tier-two-nginx:8080;
}

proxy_cache_path /var/www/cache levels=1:2 keys_zone=my-cache:8m max_size=1000m inactive=10m;
proxy_temp_path /var/www/cache/tmp;

limit_req_status 429;
limit_conn_status 429;

geo $limit {
	default 1;
	10.91.0.0/16 0;
	192.168.0.0/16 0;
}
# IPv6 /64 subnet count as single home to prevent abuse and random requests from same subnet
map $binary_remote_addr $subnet {
	"~^(\C{8})" $1;
	default $binary_remote_addr;
}

map $limit $limit_key {
	0 "";
	1 $subnet;
}
# Rate limit for external access
limit_req_zone $limit_key zone=req_zone:10m rate=5r/s;
# Circuit Braker for everyone
limit_req_zone $binary_remote_addr zone=req_zone_wl:10m rate=15r/s;


server {
	listen 0.0.0.0:80 default_server;
	listen [::]:80 default_server;

	# access_log /dev/null;
	server_name _;

	location = / {
		return 302 /@ahmetozer;
	}

	# Frontend and Backend for Unsplash
	location / {
		# Home page will consist of css and js files
		limit_req zone=req_zone burst=100 nodelay;
		limit_req zone=req_zone_wl burst=20 nodelay;


		proxy_pass https://unsplash.com;
		proxy_set_header Host unsplash.com;
		proxy_ssl_name unsplash.com;
		proxy_set_header SNI "unsplash.com";
		proxy_ssl_verify off;
		proxy_ssl_server_name on;
		proxy_http_version 1.1;
		proxy_set_header Connection "";
		proxy_set_header Accept-Encoding "identity";

		# To serve contents over our image proxy
		sub_filter 'https://images.unsplash.com'  'http://$host/auth/resize/100/100';
		sub_filter_once off;

	}

	set $authSecret "thisisasecret";

	location ~* /auth/(.*)$ {
		set $realpath "/$1";
		access_by_lua_block {

			local args = ngx.req.get_uri_args() -- Get existing query arguments as a table

			local expires = (ngx.time()+3)
			local md5 = ngx.md5_bin(expires..ngx.var.realpath.." "..ngx.var.authSecret)
			local md5 = ngx.encode_base64(md5)
			local md5 = string.gsub(md5, "+", "-")
			local md5 = string.gsub(md5, "/", "_")
			local md5 = string.gsub(md5, "=", "")
			-- Add new arguments
			args["md5"] = md5
			args["expires"] = expires

			-- Rebuild the query string with the original and new arguments
			local new_args = ngx.encode_args(args)

			-- Append the updated query string
			if new_args ~= "" then
			new_url = ngx.var.realpath .. "?" .. new_args
			end

			return ngx.redirect(new_url, 302) -- Redirect to the new URL with additional arguments

		}

		# 	echo -n '2147483647/s/link127.0.0.1 secret' | \
		# openssl md5 -binary | openssl base64 | tr +/ -_ | tr -d =
		# /s/link?md5=_e4Nc3iduzkWRm01TBBNYw&expires=2147483647
		# secure_link $arg_md5,$arg_expires;
		# secure_link_md5 "$secure_link_expires$uri secret";
		# if ($secure_link = "") {
		# 	return 403;
		# }
		# if ($secure_link = "0") {
		# 	return 410;
		# }
		# return "http://$host/images/$1?=$secure_link&k2=$secure_link_expires";
	}


	location ~* /images/(.*)$ {

		# Rate limit requests
		limit_req zone=req_zone burst=3 nodelay;
		proxy_pass http://tierTwo/$1;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Relay-T3 $server_addr;
		proxy_http_version 1.1;
		proxy_set_header Connection "";

		# Do not return 5xx for first requests if the backend is down or rate limit exiceded, try another server or use stale cache
		proxy_next_upstream error timeout http_429 http_500 http_502 http_503 http_504;
		proxy_cache_use_stale error timeout updating http_429 http_500 http_502 http_503 http_504;

		vhost_traffic_status_filter_by_set_key $upstream_addr upstream::tierOne;

		proxy_cache my-cache;
		proxy_cache_key $uri;
		proxy_cache_valid 200 302 60m;
		proxy_cache_valid 404 301 1m;

		proxy_cache_revalidate on; # Dont check if cache is valid, wait until expiry or purge
		proxy_cache_min_uses 4; # Hit cache on 5th request
		proxy_cache_background_update on;
		proxy_cache_lock on; # Locks the cache for a request until cached

		proxy_set_header If-Modified-Since $http_if_modified_since;

		add_header X-Served-T3 $server_addr always;
		add_header X-Cache-T3 $upstream_cache_status;
		add_header X-Time-T3 $upstream_header_time;

		expires 30d;
		add_header Last-Modified $date_gmt;
		if_modified_since exact;
	}

	location ~* /resize/(.*)$ {

		limit_req zone=req_zone burst=10 nodelay;

		secure_link $arg_md5,$arg_expires;
		secure_link_md5 "$secure_link_expires$uri $authSecret";

		if ($secure_link = "") {
			return 403;
		}
		if ($secure_link = "0") {
			return 410;
		}


		proxy_pass http://tierTwo/resize/$1;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Relay-T3 $server_addr;
		proxy_http_version 1.1;
		proxy_set_header Connection "";

		# Do not return 5xx for first requests if the backend is down or rate limit exiceded, try another server or use stale cache
		proxy_next_upstream error timeout http_429 http_500 http_502 http_503 http_504;
		proxy_cache_use_stale error timeout updating http_429 http_500 http_502 http_503 http_504;

		vhost_traffic_status_filter_by_set_key $upstream_addr upstream::tierOne;

		proxy_cache my-cache;
		proxy_cache_key $uri;
		proxy_cache_valid 200 302 60m;
		proxy_cache_valid 404 301 1m;

		proxy_cache_revalidate on; # Dont check if cache is valid, wait until expiry or purge
		proxy_cache_min_uses 4; # This is front facing instance, which aims to CPU not Storage, so hit cache later instead of sooner like 5th request
		proxy_cache_background_update on;
		proxy_cache_lock on; # Locks the cache for a request until cached

		proxy_set_header If-Modified-Since $http_if_modified_since;

		add_header X-Served-T3 $server_addr always;
		add_header X-Cache-T3 $upstream_cache_status;
		add_header X-Time-T3 $upstream_header_time;

		expires 30d;
		add_header Last-Modified $date_gmt;
		if_modified_since exact;
	}


	location /favicon.ico {
		return 404;
		access_log /dev/null;
	}

}