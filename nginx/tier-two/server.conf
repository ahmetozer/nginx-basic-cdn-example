upstream tierOne {
	#Prevent Duplication Between tier one servers
	# Cache sharding between servers
	hash $request_uri consistent;

	keepalive 10240; # Keepalive connections to upstream servers
	keepalive_requests 100000; # Number of requests to send on a keepalive connection, to free memory
	zone upstream_dynamic 6400k;

	server tier-one-nginx:8080 fail_timeout=5s;

}

## Cache configuration : max_size=1000megabyte inactive=120minute;
proxy_cache_path /var/www/cache levels=1:2 keys_zone=my-cache:8m max_size=1000m inactive=600m;
proxy_temp_path /var/www/cache/tmp;


server {
	listen unix:/var/run/nginx_image_resize.sock;
	location ~* /resize/(\d+)/(\d+)/(.*)$ {
		set $width $1;
		set $height $2;
		set $path $3;

		proxy_pass http://tierOne/$path/;
		# proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Relay-T2 $server_addr;
		proxy_http_version 1.1;
		proxy_set_header Connection "";

		image_filter resize $width $height;
		image_filter_jpeg_quality 75;
		image_filter_buffer 10M;


		proxy_connect_timeout 3s;
		proxy_next_upstream_timeout 10s;


		# Do not return 5xx for first requests if the backend is down or rate limit exiceded, try another server or use stale cache
		proxy_next_upstream error timeout http_429 http_500 http_502 http_503 http_504;
		proxy_cache_use_stale error timeout updating http_429 http_500 http_502 http_503 http_504;


		vhost_traffic_status_filter_by_set_key $upstream_addr upstream::backendStorage;


		proxy_cache my-cache;
		# Ignore any args in the request
		proxy_cache_key $width$height$path;
		proxy_cache_valid 200 302 60m;
		proxy_cache_valid 404 301 1m;

		proxy_set_header If-Modified-Since $http_if_modified_since;

		proxy_cache_revalidate off; # Dont check if cache is valid, wait until expiry or purge
		proxy_cache_min_uses 2; # Cache after number of request to prevent cache uncommon requests
		proxy_cache_background_update on;
		proxy_cache_lock on; # Locks the cache for a request until cached

		add_header X-Cache-T2 $upstream_cache_status;
		add_header X-Served-T2 $server_addr ;
		add_header X-Time-T2 $upstream_header_time;
		add_header X-Resize-Image "$width\x$height";
	}
}

server {
	listen 0.0.0.0:8080 default_server;
	listen [::]:8080 default_server;

	server_name tierTwo;
	add_header X-Served-T2 $server_addr always;


	location / {

		set $upstreamServer "http://tierOne";
		if ($uri ~ "/resize/(.*)") {
			set $upstreamServer "http://unix:/var/run/nginx_image_resize.sock";
		}

		proxy_pass $upstreamServer;
		proxy_set_header X-Relay-T2 $server_addr;
		proxy_http_version 1.1;
		proxy_set_header Connection "";

		proxy_connect_timeout 3s;
		proxy_next_upstream_timeout 10s;


		# Do not return 5xx for first requests if the backend is down or rate limit exiceded, try another server or use stale cache
		proxy_next_upstream error timeout http_429 http_500 http_502 http_503 http_504;
		proxy_cache_use_stale error timeout updating http_429 http_500 http_502 http_503 http_504;


		vhost_traffic_status_filter_by_set_key $upstream_addr upstream::tierOne;


		proxy_cache my-cache;
		proxy_cache_key $uri;
		proxy_cache_valid 200 302 60m;
		proxy_cache_valid 404 301 1m;

		proxy_cache_revalidate on; # Dont check if cache is valid, wait until expiry or purge
		proxy_cache_min_uses 3; # Cache after number of request
		proxy_cache_background_update on;
		proxy_cache_lock on; # Locks the cache for a request until cached

		add_header X-Cache-T2 $upstream_cache_status;
		add_header X-Served-T2 $server_addr;
		add_header X-Time-T2 $upstream_header_time;

	}
	# location / {
	# 	default_type application/json;
	# 	return 200 '{"Hello from": "Tier Two"}';
	# }


}