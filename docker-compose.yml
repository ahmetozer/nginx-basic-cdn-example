services:
  dnsmasq:
    build: 
      context: ./dnsmasq
      dockerfile: Dockerfile
    cap_add:
      - NET_ADMIN
    command: 
      - --keep-in-foreground
      - --min-cache-ttl=120
      - --port=8053
      - --strict-order
      - --dns-loop-detect
      - --no-round-robin # Important for consistent DNS responses and consistent load balancing at NGINX because of the Service Discovery
    networks:
      CDN:
        ipv4_address: 10.91.0.53
  # k6:
  #   image: ghcr.io/grafana/k6:master
  #   ports:
  #     - "6565:6565"
  #   environment:
  #     - K6_OUT=influxdb=http://
  #   command: 
  #   - 'run' 
  #   - '/k6/scenario_01.js'
  #   volumes:
  #     - type: bind 
  #       source: ./k6
  #       target: /k6
  #       read_only: true
  #   depends_on:
  #     tier-three-nginx:
  #         condition: service_healthy
  #   networks:
  #     - CDN
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      # - '--log.level=debug'
      - '--log.level=error'
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus
    networks:
      - CDN
    depends_on:
      tier-three-nginx:
          condition: service_healthy
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=foo
      - GF_SECURITY_ADMIN_PASSWORD=bar
      - GF_LOG_LEVEL=error
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/alerting:/etc/grafana/provisioning/alerting
      - ./grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
    networks:
      - CDN

  tier-one-nginx: &nginx
    deploy:
      replicas: 2
    build:
      context: ./nginx
      dockerfile: Dockerfile
    volumes:
      - &nginx_base_volume
        type: bind 
        source: ./nginx/nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
      - &nginx_common_volume
        type: bind
        source: ./nginx/common
        target: /etc/nginx/common
        read_only: true
      - type: bind
        source: ./nginx/tier-one
        target: /etc/nginx/single
        read_only: true
    healthcheck:
        test: ["CMD", "curl", "-f", "http://127.0.0.1:82"]
        interval: 3s
        timeout: 1s
        retries: 5
    networks:
      - CDN
  tier-two-nginx:
    <<: *nginx
    volumes:
      - *nginx_base_volume
      - *nginx_common_volume
      - type: bind
        source: ./nginx/tier-two
        target: /etc/nginx/single
        read_only: true
    depends_on:
      tier-one-nginx:
          condition: service_healthy
  tier-three-nginx:
    <<: *nginx
    volumes:
      - *nginx_base_volume
      - *nginx_common_volume
      - type: bind
        source: ./nginx/tier-three
        target: /etc/nginx/single
        read_only: true 
    ports:
        - 80:80
    deploy:
      replicas: 1
    depends_on:
      tier-two-nginx:
          condition: service_healthy

volumes:
  prom_data:

# 172.XX overlaps with my network
networks:
  CDN:
      driver: bridge
      ipam:
          driver: default
          config:
              - subnet: "10.91.0.0/24"
                gateway: "10.91.0.1"